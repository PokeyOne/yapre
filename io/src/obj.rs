#[cfg(test)]
mod tests;

use std::io::Write;
use std::path::Path;
use yapre_graphics_core::space::object::Object;
use yapre_graphics_core::space::Point;

// TODO: load_obj_from_contents
// TODO: load_obj_from_file

struct PointRegistry {
    points: Vec<Point>
}

impl PointRegistry {
    fn new() -> PointRegistry {
        PointRegistry { points: Vec::new() }
    }

    /// Returns the index of the point in the registry, or adds it if it doesn't
    /// exist yet.
    fn add_point(&mut self, point: Point) -> usize {
        for i in 0..self.points.len() {
            if self.points[i] == point {
                return i;
            }
        }

        let index = self.points.len();
        self.points.push(point);
        index
    }

    fn get_point(&self, index: usize) -> Option<Point> {
        if index < 0 || index >= self.points.len() {
            return None;
        }

        Some(self.points[index])
    }
}

pub fn generate_obj_file(object: &Object) -> String {
    let mut registry = PointRegistry::new();
    let mut triangle_data: Vec<[usize; 3]> = Vec::new();
    for tri in object.triangles() {
        let mut i = 0;
        let mut registry_triangle = [0, 0, 0];
        for point in tri.points {
            registry_triangle[i] = registry.add_point(point);
            i += 1;
        }
        triangle_data.push(registry_triangle);
    }

    let mut output_file_contents = String::new();
    output_file_contents.push_str("# OBJ file generated by yapre\n");
    for point in &registry.points {
        output_file_contents.push_str(&format!("v {:.6} {:.6} {:.6}\n", point.x, point.y, point.z));
    }
    for triangle in &triangle_data {
        output_file_contents.push_str(&format!(
            "f {:.6} {:.6} {:.6}\n",
            triangle[0] + 1,
            triangle[1] + 1,
            triangle[2] + 1
        ));
    }

    output_file_contents
}

pub fn save_obj_file(path: &str, object: &Object) -> Result<(), String> {
    let mut output_file = std::fs::File::create(path).map_err(|e| e.to_string())?;
    output_file
        .write_all(generate_obj_file(object).as_bytes())
        .map_err(|e| e.to_string())?;
    Ok(())
}
